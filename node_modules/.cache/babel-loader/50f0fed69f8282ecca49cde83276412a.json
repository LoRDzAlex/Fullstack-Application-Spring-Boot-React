{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport function isPlainObject(item) {\n  return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    clone: true\n  };\n  const output = options.clone ? _extends({}, target) : target;\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}","map":{"version":3,"names":["_extends","isPlainObject","item","constructor","Object","deepmerge","target","source","options","clone","output","keys","forEach","key"],"sources":["C:/Users/micha/Downloads/FullStack-Application-m223/node_modules/@mui/utils/esm/deepmerge.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport function isPlainObject(item) {\n  return item !== null && typeof item === 'object' && item.constructor === Object;\n}\nexport default function deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? _extends({}, target) : target;\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      // Avoid prototype pollution\n      if (key === '__proto__') {\n        return;\n      }\n\n      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n\n  return output;\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,SAASC,aAAa,CAACC,IAAI,EAAE;EAClC,OAAOA,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACC,WAAW,KAAKC,MAAM;AACjF;AACA,eAAe,SAASC,SAAS,CAACC,MAAM,EAAEC,MAAM,EAE7C;EAAA,IAF+CC,OAAO,uEAAG;IAC1DC,KAAK,EAAE;EACT,CAAC;EACC,MAAMC,MAAM,GAAGF,OAAO,CAACC,KAAK,GAAGT,QAAQ,CAAC,CAAC,CAAC,EAAEM,MAAM,CAAC,GAAGA,MAAM;EAE5D,IAAIL,aAAa,CAACK,MAAM,CAAC,IAAIL,aAAa,CAACM,MAAM,CAAC,EAAE;IAClDH,MAAM,CAACO,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;MACjC;MACA,IAAIA,GAAG,KAAK,WAAW,EAAE;QACvB;MACF;MAEA,IAAIZ,aAAa,CAACM,MAAM,CAACM,GAAG,CAAC,CAAC,IAAIA,GAAG,IAAIP,MAAM,IAAIL,aAAa,CAACK,MAAM,CAACO,GAAG,CAAC,CAAC,EAAE;QAC7E;QACAH,MAAM,CAACG,GAAG,CAAC,GAAGR,SAAS,CAACC,MAAM,CAACO,GAAG,CAAC,EAAEN,MAAM,CAACM,GAAG,CAAC,EAAEL,OAAO,CAAC;MAC5D,CAAC,MAAM;QACLE,MAAM,CAACG,GAAG,CAAC,GAAGN,MAAM,CAACM,GAAG,CAAC;MAC3B;IACF,CAAC,CAAC;EACJ;EAEA,OAAOH,MAAM;AACf"},"metadata":{},"sourceType":"module"}